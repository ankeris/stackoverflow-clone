{"version":3,"sources":["containers/Header.tsx","services/theme.ts","components/InputField.tsx","containers/PostQuestionForm.tsx","services/users.service.ts","services/questions.service.ts","components/QuestionButton.tsx","components/Loading.tsx","routes/PageQuestionsList.tsx","services/comments.service.ts","components/QuestionPaper.tsx","components/CommentItem.tsx","containers/PostCommentForm.tsx","components/GoBack.tsx","routes/PageQuestion.tsx","routes/PageAuthentication.tsx","App.tsx","index.tsx"],"names":["withStyles","root","flexGrow","appbar","background","grow","menuButton","marginLeft","marginRight","props","_useContext","useContext","AppContext","User","isLoggedIn","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Fragment","name","Button_default","onClick","localStorage","removeItem","window","location","href","theme","palette","primary","main","contrastText","secondary","error","typography","useNextVariants","InputField","_ref","placeholder","field","type","multiline","react","TextField_default","Object","assign","required","margin","rows","fullWidth","paper","padding","justifyContent","onSubmit","_React$useState","React","_React$useState2","slicedToArray","open","setOpen","handleClose","Grid_default","container","alignItems","wrap","Fab_default","Add_default","Dialog_default","onClose","maxWidth","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","formik_esm","initialValues","title","bodyText","values","_ref2","component","addTokenHeader","Headers","Authorization","concat","getItem","Content-Type","UsertService","registerUser","username","password","Promise","resolve","reject","fetch","process","method","headers","body","JSON","stringify","then","data","status","message","json","login","QuestionService","getAll","res","rej","finalData","catch","err","getOne","postQuestion","userId","createdBy","response","upvoteQuestion","questionId","overflow","spacing","unit","btn","width","marginBottom","avatar","backgroundColor","light","handleClick","upvotesCount","createdAt","CardActionArea_default","Paper_default","item","Avatar_default","xs","align","gutterBottom","Loading","PageQuestions","_useState","useState","_useState2","questions","setQuestions","user","useEffect","PostQuestionForm","formData","objectSpread","_id","newQuestion","history","push","length","map","qst","components_QuestionButton","key","CommentService","getAllForQuestion","question_id","postComment","user_id","wrapper","button","&:disabled","question","liked","like","dislike","style","textAlign","Tooltip_default","disabled","ThumbUp_default","ThumbDown_default","direction","justify","src","image","GoBack","Button_Button_default","goBack","reducer","state","action","comments","likedQuestion","isLiked","value","dislikedQuestion","Error","initialState","PageQuestion","match","_useReducer","useReducer","_useReducer2","dispatch","params","upvotes","indexOf","CommentsService","GoBack_GoBack","components_QuestionPaper","x","components_CommentItem","containers_PostCommentForm","text","setAuth","_useState3","_useState4","successMsg","setSuccessMsg","_useState5","_useState6","errmsg","setErrmsg","_useState7","_useState8","regMsg","setRegMsg","UsersService","resolved","token","setItem","rejected","msg","register","_ref3","PrivateRoute","Component","authed","rest","objectWithoutProperties","react_router","render","to","pathname","from","checkAuth","decode","e","createContext","App","setUser","setIsLoggedIn","MuiThemeProvider_default","createMuiTheme","Provider","react_router_dom","Header","path","routes_PageAuthentication","PageQuestionsList","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.816a66ff.chunk.js","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { AppContext } from \"../App\";\r\n\r\nconst styles = {\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    appbar: {\r\n        background: \"linear-gradient(to right, #464646, #484754, #484963, #454b73, #3e4d83)\"\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20\r\n    }\r\n};\r\n\r\nfunction ButtonAppBar(props) {\r\n    const { User, isLoggedIn } = useContext(AppContext);\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar className={classes.appbar} position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                        Pile Underflow\r\n                    </Typography>\r\n                    {isLoggedIn ? (\r\n                        <>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.menuButton}>\r\n                                Logged in as {User.name}\r\n                            </Typography>\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    localStorage.removeItem(\"token\");\r\n                                    window.location.href = \"/login\";\r\n                                }}\r\n                            >\r\n                                Log out\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <Button color=\"primary\" variant=\"contained\">\r\n                            Log in\r\n                        </Button>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(ButtonAppBar);\r\n","export const theme = {\r\n    palette: {\r\n        primary: {\r\n            // light: will be calculated from palette.primary.main,\r\n            main: '#00bfa5',\r\n            // dark: will be calculated from palette.primary.main,\r\n            contrastText: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#e64a19',\r\n            // dark: will be calculated from palette.secondary.main,\r\n        },\r\n        error: {\r\n            main: '#ff0000'\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    },\r\n}","import * as React from \"react\";\r\nimport { FieldProps } from \"formik\";\r\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField/TextField\";\r\n\r\nexport const InputField: React.FC<FieldProps & TextFieldProps> = ({\r\n  placeholder,\r\n  field,\r\n  type,\r\n  multiline\r\n}) => {\r\n  return <TextField type={type} placeholder={placeholder} required={true} {...field} multiline={multiline} margin=\"normal\" rows=\"5\" fullWidth variant=\"outlined\"/>;\r\n};","import withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { Form, Formik, Field } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport { PostQuestionFormValues } from \"../routes/PageQuestionsList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        padding: 15\r\n    },\r\n    palette: {\r\n        margin: 15,\r\n        justifyContent: \"center\"\r\n    }\r\n});\r\ninterface Props {\r\n    onSubmit: (values: PostQuestionFormValues) => void;\r\n    classes: any;\r\n}\r\n\r\nconst FormDialog: React.FC<Props> = ({ classes, onSubmit }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container alignItems=\"center\" wrap=\"nowrap\" className={classes.palette}>\r\n                <Typography variant=\"h6\">Add question</Typography>\r\n                <Fab color=\"primary\" aria-label=\"Add\" onClick={handleClickOpen}>\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Grid>\r\n            <Dialog open={open} onClose={handleClose} fullWidth={true} maxWidth={\"md\"} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Post a question to Pile Underflow!</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <br />\r\n                        Please make sure that your question does not exist before asking\r\n                    </DialogContentText>\r\n                    <Formik\r\n                        initialValues={{ title: \"\", bodyText: \"\" }}\r\n                        onSubmit={values => {\r\n                            onSubmit(values);\r\n                        }}\r\n                    >\r\n                        {({ values }) => (\r\n                            <Form>\r\n                                <div>\r\n                                    <Field name=\"title\" placeholder=\"Question title\" component={InputField} />\r\n                                </div>\r\n                                <div>\r\n                                    <Field name=\"bodyText\" placeholder=\"Describe the problem\" multiline={true} component={InputField} />\r\n                                </div>\r\n                                <Button type=\"submit\" onClick={handleClose} color=\"primary\" variant=\"outlined\">\r\n                                    submit\r\n                                </Button>\r\n                                <Button onClick={handleClose} color=\"secondary\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(FormDialog);\r\n","import { User } from \"../../../sharedTypes/user.type\";\r\n\r\ntype RegisterFeedback = {\r\n    status: number;\r\n    message: any;\r\n};\r\n\r\nexport const addTokenHeader = () => {\r\n    return new Headers({\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        \"Content-Type\": \"application/json\"\r\n    });\r\n};\r\n\r\nconst UsertService = {\r\n    registerUser: function({ username, password }) {\r\n        return new Promise<RegisterFeedback>((resolve, reject) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/users/`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: username,\r\n                    password: password\r\n                })\r\n            }).then((data: Response) => {\r\n                resolve({\r\n                    status: data.status,\r\n                    message: data.json()\r\n                });\r\n            });\r\n        });\r\n    },\r\n    login: ({ username, password }) => {\r\n        return new Promise<any>((resolve, reject) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/users/login`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: username,\r\n                    password: password\r\n                })\r\n            }).then((data: Response) => {\r\n                if (data.status !== 500) {\r\n                    resolve(data.json());\r\n                } else {\r\n                    reject(\"bad rq\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nexport default UsertService;\r\n","import { Question } from \"../../../sharedTypes/question.type\";\r\nimport { addTokenHeader } from \"./users.service\";\r\n\r\nconst QuestionService = {\r\n    getAll: function() {\r\n        return new Promise<Array<Question>>((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/questions`, { headers: addTokenHeader() })\r\n                .then(function(data) {\r\n                    const finalData = data.json();\r\n                    res(finalData);\r\n                })\r\n                .catch((err: Error) => rej(err));\r\n        });\r\n    },\r\n\r\n    getOne: function(id: string) {\r\n        return new Promise<Question>((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/questions/${id}`, { headers: addTokenHeader() })\r\n                .then(function(data) {\r\n                    const finalData = data.json();\r\n                    res(finalData);\r\n                })\r\n                .catch((err: Error) => rej(err));\r\n        });\r\n    },\r\n\r\n    postQuestion: function({ title, bodyText, userId }) {\r\n        return new Promise<Question>((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/questions/user/${userId}`, {\r\n                method: \"POST\",\r\n                headers: addTokenHeader(),\r\n                body: JSON.stringify({\r\n                    title: title,\r\n                    body: bodyText,\r\n                    createdBy: userId\r\n                })\r\n            }).then(response => res(response.json()));\r\n        });\r\n    },\r\n    upvoteQuestion: (questionId, userId) => {\r\n        return new Promise((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/questions/upvote/${questionId}/user/${userId}`, {\r\n                method: \"PATCH\",\r\n                headers: addTokenHeader()\r\n            }).then(response => res(response.json()));\r\n        });\r\n    }\r\n};\r\n\r\nexport default QuestionService;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Question} from '../../../sharedTypes/question.type';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    overflow: 'hidden',\r\n    padding: `0 ${theme.spacing.unit * 3}px`,\r\n  },\r\n  btn: {\r\n    width: '100%',\r\n    marginBottom: `${theme.spacing.unit * 2}px`,\r\n    maxWidth: '800px',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit * 2,\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.light,\r\n  }\r\n});\r\n\r\ninterface Props extends Question {\r\n    classes: any;\r\n    id: any;\r\n    handleClick: (id: string) => void;\r\n}\r\n\r\nconst QuestionButton: React.FC<Props> = ({handleClick, id, classes, title, upvotesCount, createdAt, createdBy}) => {\r\n  return (\r\n        <CardActionArea className={classes.btn} onClick={() => handleClick(id)}>\r\n          <Paper className={classes.paper}>\r\n            <Grid container wrap=\"nowrap\" spacing={16}>\r\n              <Grid item>\r\n                <Avatar color=\"primary\" className={upvotesCount > 0 ? classes.avatar : null}>{upvotesCount}</Avatar>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Typography variant=\"h6\" component=\"h3\">{title}</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography align=\"right\" variant=\"overline\" gutterBottom>\r\n                  {createdBy.name}\r\n                </Typography>\r\n                <Typography align=\"right\" variant=\"overline\" gutterBottom>\r\n                  {createdAt}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </CardActionArea>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(QuestionButton);","import React from 'react';\r\nexport default () => <div className=\"lds-ripple\"><div></div><div></div></div>","import React, { useState, useEffect, useReducer, useContext } from \"react\";\r\nimport PostQuestionsForm from \"../containers/PostQuestionForm\";\r\nimport QuestionService from \"../services/questions.service\";\r\nimport { Question } from \"../../../sharedTypes/question.type\";\r\nimport { AppContext } from \"../App\";\r\nimport { User } from \"../../../sharedTypes/user.type\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport QuestionButton from \"../components/QuestionButton\";\r\nimport Loading from \"../components/Loading\";\r\n\r\nexport interface PostQuestionFormValues {\r\n    title: string;\r\n    bodyText: string;\r\n}\r\n\r\nexport default function PageQuestions(props: RouteComponentProps) {\r\n    const [questions, setQuestions] = useState<Array<Question>>([]);\r\n    const user: User = useContext(AppContext).User;\r\n\r\n    const addQuestion = (data: PostQuestionFormValues) => {\r\n        QuestionService.postQuestion({ ...data, userId: user._id }).then((newQuestion: Question) => {\r\n            props.history.push(\"/questions/\" + newQuestion._id);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        QuestionService.getAll().then((data: Array<Question>) => setQuestions(data));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"content-center content-section\">\r\n            <PostQuestionsForm onSubmit={(formData: PostQuestionFormValues) => addQuestion(formData)} />\r\n            {questions.length ? (\r\n                questions.map(qst => (\r\n                    <QuestionButton\r\n                        handleClick={id => props.history.push(\"/questions/\" + id)}\r\n                        key={qst._id}\r\n                        id={qst._id}\r\n                        title={qst.title}\r\n                        upvotesCount={qst.upvotesCount}\r\n                        createdAt={qst.createdAt}\r\n                        createdBy={qst.createdBy}\r\n                    />\r\n                ))\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import { Comment } from \"../../../sharedTypes/comment.type\";\r\nimport { addTokenHeader } from \"./users.service\";\r\n\r\nconst CommentService = {\r\n    getAllForQuestion: function(question_id: string) {\r\n        return new Promise<Array<Comment>>((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}/questions/${question_id}/comments`, { headers: addTokenHeader() })\r\n                .then(function(data) {\r\n                    const finalData = data.json();\r\n                    res(finalData);\r\n                })\r\n                .catch((err: Error) => rej(err));\r\n        });\r\n    },\r\n    postComment: function(question_id: string, user_id: any, bodyText) {\r\n        return new Promise<Array<Comment>>((res, rej) => {\r\n            fetch(`${process.env.REACT_APP_API_URL}//questions/${question_id}/user/${user_id}`, {\r\n                method: \"POST\",\r\n                headers: addTokenHeader(),\r\n                body: JSON.stringify({\r\n                    body: bodyText\r\n                })\r\n            }).then(response => res(response.json()));\r\n        });\r\n    }\r\n};\r\n\r\nexport default CommentService;\r\n","import React, { useState, useEffect, FunctionComponent } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport ThumbUp from \"@material-ui/icons/ThumbUp\";\r\nimport ThumbDown from \"@material-ui/icons/ThumbDown\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Question } from \"../../../sharedTypes/question.type\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nconst styles = theme => ({\r\n    wrapper: {\r\n        marginBottom: `${theme.spacing.unit * 2}px`,\r\n        width: \"100%\",\r\n        maxWidth: \"800px\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit * 2\r\n    },\r\n    avatar: {\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    button: {\r\n        \"&:disabled\": {\r\n            color: theme.palette.primary.light\r\n        }\r\n    }\r\n});\r\n\r\ninterface Props {\r\n    classes: any;\r\n    liked: boolean;\r\n    question: Question;\r\n    like: () => void;\r\n    dislike: () => void;\r\n}\r\n\r\nconst QuestionPaper: FunctionComponent<Props> = ({ classes, question, liked, like, dislike }) => {\r\n    return (\r\n        <section className={classes.wrapper + \" push-top\"}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={16}>\r\n                    <Grid container alignItems=\"center\" wrap=\"nowrap\">\r\n                        <Grid style={{ textAlign: \"center\", margin: \"0 10px\" }}>\r\n                            <Tooltip title={liked ? `You've already liked this question` : \"Like\"}>\r\n                                <span>\r\n                                    <IconButton disabled={liked} color={liked ? \"primary\" : \"default\"} className={classes.button} onClick={like}>\r\n                                        <ThumbUp />\r\n                                    </IconButton>\r\n                                </span>\r\n                            </Tooltip>\r\n                            <Avatar color=\"primary\" className={question.upvotesCount > 0 ? classes.avatar : null}>\r\n                                {question.upvotesCount}\r\n                            </Avatar>\r\n                            <IconButton onClick={dislike}>\r\n                                <ThumbDown />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Typography variant=\"h6\" component=\"h3\">\r\n                            {question.title}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>{question.body}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction=\"column\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n                    <Avatar src={question.createdBy.image} color=\"primary\" />\r\n                    <Typography align=\"right\" variant=\"overline\" gutterBottom>\r\n                        {question.createdBy.name} <br />\r\n                        {question.createdAt}\r\n                    </Typography>\r\n                </Grid>\r\n            </Paper>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(QuestionPaper);\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Comment } from \"../../../sharedTypes/comment.type\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: \"hidden\",\r\n        padding: `0 ${theme.spacing.unit * 3}px`\r\n    },\r\n    wrapper: {\r\n        marginBottom: `${theme.spacing.unit * 2}px`,\r\n        width: \"100%\",\r\n        maxWidth: \"800px\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit * 2\r\n    },\r\n    avatar: {\r\n        marginLeft: \"auto\"\r\n    }\r\n});\r\n\r\ninterface Props {\r\n    classes: any;\r\n    body: string;\r\n    upvotesCount: number;\r\n    createdBy: any;\r\n    createdAt: Date;\r\n}\r\n\r\nconst CommentItem: React.FC<Props> = ({ classes, body, upvotesCount, createdAt, createdBy }) => {\r\n    return (\r\n        <section className={classes.wrapper}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container wrap=\"nowrap\" spacing={16}>\r\n                    <Grid item xs>\r\n                        <Typography>{body}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Avatar className={classes.avatar} src={createdBy.image} color=\"primary\" />\r\n                        <Typography align=\"right\" variant=\"overline\" gutterBottom>\r\n                            {createdBy.name}\r\n                        </Typography>\r\n                        <Typography align=\"right\" variant=\"overline\" gutterBottom>\r\n                            {createdAt}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(CommentItem);\r\n","import { Form, Formik, Field } from \"formik\";\r\nimport * as React from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { InputField } from \"../components/InputField\";\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    padding: theme.spacing.unit * 2,\r\n    maxWidth: '600px',\r\n    width: '100%',\r\n  },\r\n});\r\ninterface Props {\r\n  onSubmit: (values: {bodyText: string}) => void;\r\n  classes: any;\r\n}\r\n\r\nconst PostCommentForm: React.FC<Props> = ({ classes, onSubmit }) => {\r\n    return (\r\n        <Paper color=\"primary\" className={classes.paper}>\r\n            <Formik\r\n              initialValues={{ bodyText: \"\" }}\r\n              onSubmit={values => {\r\n                onSubmit(values);\r\n              }}\r\n            >\r\n              {({ values }) => (\r\n                <Form>\r\n                  <div>\r\n                    <Field name=\"bodyText\" placeholder=\"Post your answer here\" multiline={true} component={InputField} />\r\n                  </div>\r\n                  <Button type=\"submit\" color=\"primary\" variant=\"outlined\">submit</Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(PostCommentForm);","import * as React from \"react\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\nexport const GoBack = ({ history }) => (\r\n    <Button onClick={() => history.goBack()} color=\"default\" variant=\"contained\">\r\n        Go back 🚪\r\n    </Button>\r\n);\r\n","import React, { useState, useEffect, FunctionComponent, useReducer, useContext } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CommentsService from \"../services/comments.service\";\r\nimport { Question } from \"../../../sharedTypes/question.type\";\r\nimport { Comment } from \"../../../sharedTypes/comment.type\";\r\nimport QuestionPaper from \"../components/QuestionPaper\";\r\nimport Loading from \"../components/Loading\";\r\nimport CommentItem from \"../components/CommentItem\";\r\nimport PostCommentForm from \"../containers/PostCommentForm\";\r\nimport { User } from \"../../../sharedTypes/user.type\";\r\nimport { AppContext } from \"../App\";\r\nimport { GoBack } from \"../components/GoBack\";\r\nimport QuestionService from \"../services/questions.service\";\r\ninterface Props extends RouteComponentProps<any> {}\r\n\r\nfunction reducer(state, action): any {\r\n    switch (action.type) {\r\n        case \"getQuestion\":\r\n            return { ...state, question: action.question };\r\n        case \"getComments\":\r\n            return { ...state, comments: action.comments };\r\n        case \"like\":\r\n            const likedQuestion = state.question;\r\n            QuestionService.upvoteQuestion(likedQuestion._id, action.user._id);\r\n            likedQuestion.upvotesCount += 1;\r\n            return { ...state, question: likedQuestion, isLiked: true };\r\n        case \"isLiked\":\r\n            return { ...state, isLiked: action.value };\r\n        case \"dislike\":\r\n            const dislikedQuestion = state.question;\r\n            dislikedQuestion.upvotesCount -= 1;\r\n            return { ...state, question: dislikedQuestion };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\nconst initialState = {\r\n    question: {} as Question,\r\n    comments: [] as Array<Comment>\r\n};\r\nconst PageQuestion: FunctionComponent<Props> = ({ history, match }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const user: User = useContext(AppContext).User;\r\n\r\n    useEffect(() => {\r\n        QuestionService.getOne(match.params.id).then((res: Question) => {\r\n            if (res.upvotes!.indexOf(user._id as string) !== -1) {\r\n                dispatch({ type: \"isLiked\", value: true, user });\r\n            }\r\n            dispatch({ type: \"getQuestion\", question: res });\r\n        });\r\n        CommentsService.getAllForQuestion(match.params.id).then((res: Array<Comment>) => {\r\n            dispatch({ type: \"getComments\", comments: res });\r\n        });\r\n    }, []);\r\n\r\n    function addComment(text) {\r\n        CommentsService.postComment(match.params.id, user._id, text).then(x =>\r\n            CommentsService.getAllForQuestion(match.params.id).then((res: Array<Comment>) => {\r\n                dispatch({ type: \"getComments\", comments: res });\r\n            })\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"content-center content-section\">\r\n            <GoBack history={history} />\r\n            {state.question._id ? (\r\n                <>\r\n                    <QuestionPaper\r\n                        liked={state.isLiked}\r\n                        question={state.question}\r\n                        like={() => dispatch({ type: \"like\", user })}\r\n                        dislike={() => dispatch({ type: \"dislike\" })}\r\n                    />\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                        Answers:\r\n                    </Typography>\r\n                </>\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n            {state.comments\r\n                ? state.comments.map((x: Comment) => (\r\n                      <CommentItem key={x._id} body={x.body} upvotesCount={x.upvotesCount} createdBy={x.createdBy} createdAt={x.createdAt} />\r\n                  ))\r\n                : null}\r\n            <PostCommentForm onSubmit={x => addComment(x.bodyText)} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageQuestion;\r\n","import { Form, Formik, Field } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport UsersService from \"../services/users.service\";\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        padding: theme.spacing.unit * 2,\r\n        maxWidth: \"600px\",\r\n        width: \"100%\"\r\n    }\r\n});\r\n\r\ninterface Props extends RouteComponentProps {\r\n    //   onSubmit: (values: {bodyText: string}) => void;\r\n    classes: any;\r\n    setAuth: () => void;\r\n}\r\n\r\nconst PageAuthentication: React.FC<Props> = ({ history, classes, setAuth }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [successMsg, setSuccessMsg] = useState(\"\");\r\n    const [errmsg, setErrmsg] = useState(\"\");\r\n    const [regMsg, setRegMsg] = useState(\"\");\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n        setRegMsg(\"\");\r\n    }\r\n\r\n    function register(values) {\r\n        UsersService.registerUser(values).then(response => {\r\n            if (response.status !== 500) {\r\n                response.message.then(msg => setSuccessMsg(\"You have successfully created an account. Log in now 😎\"));\r\n                setOpen(false);\r\n            } else {\r\n                response.message.then(msg => setRegMsg(msg));\r\n            }\r\n        });\r\n    }\r\n    function login(values) {\r\n        UsersService.login(values).then(\r\n            resolved => {\r\n                setErrmsg(\"\");\r\n                const token = resolved;\r\n                localStorage.setItem(\"token\", token);\r\n                setAuth();\r\n                history.push(\"/questions/\");\r\n            },\r\n            rejected => {\r\n                setErrmsg(\"Username or password incorrect!\");\r\n            }\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"content-center content-section\">\r\n            <Paper color=\"primary\" className={classes.paper}>\r\n                <Typography variant=\"h5\" component=\"h4\">\r\n                    Login to PileUnderflow! 🙋‍\r\n                </Typography>\r\n                {successMsg ? <Typography color=\"primary\">{successMsg}</Typography> : \"\"}\r\n                {errmsg ? <Typography color=\"secondary\">{errmsg}</Typography> : \"\"}\r\n                <Formik\r\n                    initialValues={{ username: \"\", password: \"\" }}\r\n                    onSubmit={values => {\r\n                        login(values);\r\n                    }}\r\n                >\r\n                    {({ values }) => (\r\n                        <Form>\r\n                            <Field name=\"username\" type=\"text\" placeholder=\"Username\" component={InputField} />\r\n                            <Field name=\"password\" type=\"password\" placeholder=\"Password\" component={InputField} />\r\n                            <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\r\n                                Login\r\n                            </Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Paper>\r\n\r\n            {/* Register */}\r\n            <div className=\"push-top\">\r\n                <Button onClick={handleClickOpen} type=\"button\" color=\"secondary\" variant=\"contained\">\r\n                    Don't have an account yet?\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose} fullWidth={true} maxWidth=\"sm\" aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">Register form. Welcome! 🎉</DialogTitle>\r\n                    <DialogContent>\r\n                        <Formik\r\n                            initialValues={{ username: \"\", password: \"\" }}\r\n                            onSubmit={values => {\r\n                                register(values);\r\n                            }}\r\n                        >\r\n                            {({ values }) => (\r\n                                <Form>\r\n                                    {regMsg ? <Typography color=\"error\">{regMsg}</Typography> : \"\"}\r\n                                    <Field name=\"username\" type=\"text\" placeholder=\"Type username\" component={InputField} />\r\n                                    <Field name=\"password\" type=\"password\" placeholder=\"Type new password\" component={InputField} />\r\n                                    <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\r\n                                        Register\r\n                                    </Button>\r\n                                    <Button onClick={handleClose} color=\"secondary\">\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(PageAuthentication);\r\n","import React, { useEffect, useState, ReactPropTypes, createContext } from \"react\";\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Header from \"./containers/Header\";\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\r\nimport { theme } from \"./services/theme\";\r\nimport { User } from \"../../sharedTypes/user.type\";\r\nimport PageQuestionsList from \"./routes/PageQuestionsList\";\r\nimport PageQuestion from \"./routes/PageQuestion\";\r\nimport PageAuthentication from \"./routes/PageAuthentication\";\r\nimport decode from \"jwt-decode\";\r\n\r\nfunction PrivateRoute({ component: Component, authed, ...rest }) {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props: any) => (authed ? <Component {...props} /> : <Redirect to={{ pathname: \"/login\", state: { from: props.location } }} />)}\r\n        />\r\n    );\r\n}\r\n\r\nconst checkAuth = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        return decode(token);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\ntype AppContext = {\r\n    User: User;\r\n    isLoggedIn: boolean;\r\n};\r\n\r\nexport const AppContext = createContext({} as AppContext);\r\n\r\nconst App = () => {\r\n    const [user, setUser] = useState<User>(checkAuth().user || ({} as User));\r\n    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(!!checkAuth().user);\r\n    const afterLogin = () => {\r\n        setUser(checkAuth().user);\r\n        setIsLoggedIn(!!checkAuth().user);\r\n    };\r\n    return (\r\n        <MuiThemeProvider theme={createMuiTheme(theme)}>\r\n            <AppContext.Provider value={{ User: user, isLoggedIn }}>\r\n                <BrowserRouter>\r\n                    <Header />\r\n                    <Switch>\r\n                        <Route path=\"/login\" render={(props: any) => <PageAuthentication {...props} setAuth={() => afterLogin()} />} />\r\n                        <PrivateRoute authed={checkAuth} path=\"/questions/:id\" component={PageQuestion} />\r\n                        <PrivateRoute authed={checkAuth} path=\"/questions\" component={PageQuestionsList} />\r\n                        {isLoggedIn ? <Redirect from=\"/\" to=\"/questions\" /> : <Redirect from=\"/\" to=\"/login\" />}\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </AppContext.Provider>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}